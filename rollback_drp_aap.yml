---
- name: Performs a Rollback of the platform to the main site
  hosts: all
  become: true
  gather_facts: true
  tasks:

    - name: Configures Automation Controller nodes
      when: inventory_hostname in groups['automation_controller']
      block:
        - name: Stops automation controller services on Control Nodes
          ansible.builtin.service:
            name: automation-controller.service
            state: stopped

        - name: Changes Controller DB configuration
          ansible.builtin.replace:
            path: /etc/tower/conf.d/postgres.py
            regexp: "'{{ hostvars['db_secondary']['ansible_facts']['fqdn'] }}'"
            replace: "'{{ hostvars['db_primary']['ansible_facts']['fqdn'] }}'"
          notify: Restart automation controller services

    - name: Configures Event Driven Controller node
      when: inventory_hostname in groups['event_driven_controller']
      block:
        - name: Stops automation controller services on Control Nodes
          ansible.builtin.service:
            name: automation-eda-controller.service
            state: stopped

        - name: Changes Event Driven Controller DB configuration
          ansible.builtin.replace:
            path: /etc/ansible-automation-platform/eda/environment
            regexp: "^(EDA_DB_HOST={{ hostvars['db_secondary']['ansible_facts']['fqdn'] }})$"
            replace: "EDA_DB_HOST={{ hostvars['db_primary']['ansible_facts']['fqdn'] }}"
          notify: Restart automation eda controller service

    - name: Configures Private Automation Hub nodes
      when: inventory_hostname in groups['automation_hub']
      block:
        - name: Stops automation hub services on Hub Nodes
          ansible.builtin.service:
            name: "{{ item }}"
            state: stopped
          loop:
            - pulpcore.service
            - pulpcore-api.service
            - pulpcore-content.service
            - pulpcore-worker@1.service
            - pulpcore-worker@2.service
            - nginx.service
            - redis.service

        - name: Changes Hub DB configuration
          ansible.builtin.replace:
            path: /etc/pulp/settings.py
            regexp: "'{{ hostvars['db_secondary']['ansible_facts']['fqdn'] }}'"
            replace: "'{{ hostvars['db_primary']['ansible_facts']['fqdn'] }}'"
          notify: Restart automation hub services

    - name: Moves data from DB secondary to primary
      when: inventory_hostname in groups['db_servers']
      block:
        - name: Stops potgresql service
          ansible.builtin.service:
            name: postgresql.service
            state: stopped

        - name: Removes outdated data from primary db
          when: inventory_hostname == "db_primary"
          ansible.builtin.file:
            path: "/var/lib/pgsql/data"
            state: absent

        - name: Copies current data from secondary to primary
          when: inventory_hostname == "db_primary"
          ansible.posix.synchronize:
            src: /var/lib/pgsql/data
            dest: /var/lib/pgsql/
          delegate_to: db_secondary

        - name: Starts postgresql on primary
          when: inventory_hostname == "db_primary"
          ansible.builtin.service:
            name: postgresql.service
            state: started

    - name: Prepares primary node for replication
      when: inventory_hostname == "db_primary"
      block:

        - name: Ensures replication user exists in primary database
          become_user: postgres
          register: replica_user_creation
          ansible.builtin.command:
            cmd: "psql -c 'CREATE ROLE replica_user WITH REPLICATION LOGIN;'"
          changed_when: "'CREATE ROLE' in replica_user_creation['stdout']"
          ignore_errors: true

        - name: Deletes replication slot 'replica_1'
          become_user: postgres
          ansible.builtin.command:
            cmd: "psql -c \"SELECT pg_drop_replication_slot('replica_1');\""
          ignore_errors: true

        - name: "Grant {{ hostvars['db_secondary']['ansible_facts']['default_ipv4']['address'] }}/32 access for replica_user using trust authentication"
          community.postgresql.postgresql_pg_hba:
            dest: /var/lib/pgsql/data/pg_hba.conf
            contype: host
            users: replica_user
            source: "{{ hostvars['db_secondary']['ansible_facts']['default_ipv4']['address'] }}/32"
            databases: replication
            method: trust
          notify: Restart postgresql

        - name: Creates a backup of postgresql.conf file
          ansible.builtin.copy:
            remote_src: true
            mode: preserve
            src: /var/lib/pgsql/data/postgresql.conf
            dest: "/var/lib/pgsql/data/postgresql.conf.bkp.{{ ansible_facts['date_time']['iso8601'] }}"
          register: backup_conf
          become_user: postgres

        - name: Allows connections from all networks
          ansible.builtin.lineinfile:
            path: /var/lib/pgsql/data/postgresql.conf
            regex: '^(#listen_addresses|listen_addresses).*'
            line: "listen_addresses = '*'"
          notify: Restart postgresql

        - name: Specifies the amount of information to be written to the Write Ahead Log (WAL) file
          ansible.builtin.lineinfile:
            path: /var/lib/pgsql/data/postgresql.conf
            regex: '^(#wal_level|wal_level).*'
            line: "wal_level = logical"
          notify: Restart postgresql
          
        - name: Allows the PostgreSQL server to write the entire content of each disk page to the WAL file during the first modification of the page
          ansible.builtin.lineinfile: 
            path: /var/lib/pgsql/data/postgresql.conf
            regex: '^(#wal_log_hints|wal_log_hints).*' 
            line: "wal_log_hints = on"
          notify: Restart postgresql

        - name: Gets stats of postgresql.conf
          ansible.builtin.stat:
            path: /var/lib/pgsql/data/postgresql.conf
          register: postgres_conf

        - name: Removes backup file if the configuration was not modified
          ansible.builtin.file:
            path: "{{ backup_conf['dest'] }}"
            state: absent
          when: "backup_conf['checksum'] == postgres_conf['stat']['checksum']"


    - name: Configures secondary node
      when: inventory_hostname == "db_secondary"
      block:
        - name: Stops database server
          ansible.builtin.service:
            name: postgresql
            state: stopped

        - name: Removes secondary db data
          ansible.builtin.file:
            path: "/var/lib/pgsql/data/"
            state: absent

        - name: Start the replication from Primary
          become_user: postgres
          ansible.builtin.command:
            cmd: "pg_basebackup -h {{ hostvars['db_primary']['ansible_facts']['default_ipv4']['address'] }} -U replica_user -X stream -C -S replica_1 -v -R -D /var/lib/pgsql/data/"
          notify: Restart postgresql

  handlers:
    - name: Restart postgresql
      ansible.builtin.service:
        name: postgresql
        state: restarted

    - name: Restart automation controller services
      ansible.builtin.service:
        name: automation-controller.service
        state: restarted

    - name: Restart automation eda controller service
      ansible.builtin.service:
        name: automation-eda-controller.service 
        state: restarted

    - name: Restart automation hub services
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop:
        - pulpcore.service
        - pulpcore-api.service
        - pulpcore-content.service
        - pulpcore-worker@1.service
        - pulpcore-worker@2.service
        - nginx.service
        - redis.service

